#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
#define USE_FORCES 1
#define USE_CULLING 1
// The derectives below are only meaningful when USE_CULLING is 1
#define USE_ORIENTATION_CULLING 1
#define USE_VIEW_FRUSTUM_CULLING 1
#define USE_DISTANCE_CULLING 1

// Parameters for the grass algorithm
#define WIND_STRENGTH 5.0f
#define WIND_FREQUENCY 1.0f
#define WIND_TURBULENCE 6.5f
#define CULLING_DISTANCE 30.0f
#define CULLING_BINS 10

layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
} time;

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like

// TODO: Add bindings to:
// 1. Store the input blades
layout(set = 2, binding = 0) buffer InputBlades {
    Blade blades[];
} inputBlades;

// 2. Write out the culled blades
layout(set = 2, binding = 1) buffer CulledBlades {
    Blade blades[];
} outputBlades;

// 3. Write the total number of blades remaining
layout(set = 2, binding = 2) buffer NumBlades {
    uint vertexCount;   // Write the number of blades remaining here
    uint instanceCount; // = 1
    uint firstVertex;   // = 0
    uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

vec3 getWindVector(vec3 v) {
    // Time-based oscillation for smooth wind variation
    float windX = WIND_STRENGTH * sin(time.totalTime * WIND_FREQUENCY);
    
    // Turbulence using position-based noise to make wind vary per blade
    float windZ = WIND_TURBULENCE * sin(dot(v.xz, vec2(12.9898, 78.233)) * 43758.5453 + time.totalTime * WIND_FREQUENCY);
    
    // Fixed Y component for consistent vertical influence
    float windY = 0.2;

    return vec3(windX, windY, windZ);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    uint bladeIdx = gl_GlobalInvocationID.x;
    Blade curBlade = inputBlades.blades[bladeIdx];
    vec3 v0 = curBlade.v0.xyz;
    vec3 v1 = curBlade.v1.xyz;
    vec3 v2 = curBlade.v2.xyz;
    vec3 up = curBlade.up.xyz;
    float orientation = curBlade.v0.w;
    float height = curBlade.v1.w;
    float width = curBlade.v2.w;
    float stiffness = curBlade.up.w;
    
    vec3 s = vec3(cos(orientation), 0.0, sin(orientation));
    vec3 f = normalize(cross(up, s));

    // TODO: Apply forces on every blade and update the vertices in the buffer
    #if USE_FORCES
        // Gravity
        const vec4 D = vec4(0.0, -1.0, 0.0, 9.8);
        vec3 gE = normalize(D.xyz) * D.w;
        vec3 gF = 0.25 * length(gE) * f;
        vec3 g = gE + gF;

        // Recovery
        vec3 iv2 = v0 + up * height;
        vec3 r = (iv2 - v2) * stiffness;

        // Wind 
        vec3 wi = getWindVector(v0);
        vec3 diff = v2 - v0;
        float fd = 1.0f - abs(dot(normalize(wi), normalize(diff)));
        float fr = dot(diff, up) / height;
        vec3 w = wi * fd * fr;

        // Move the blade
        vec3 translation = (g + r + w) * time.deltaTime;
        v2 += translation;

        // Validation
        v2 -= up * min(0.0f, dot(v2 - v0, up)); // ensure v2 is always above the ground
        vec3 v2_minus_v0 = v2 - v0; 
        float l_proj = length(v2_minus_v0 - up * dot(up, v2_minus_v0));
        float l_proj_div_height = l_proj / height; 
        vec3 v1_tmp = v0 + height * up * max(1.0f - l_proj_div_height, 0.05 * max(l_proj_div_height, 1.0f)); // ensure the valid position for v1
        float L0 = distance(v0, v2);
        float L1 = distance(v0, v1_tmp) + distance(v1_tmp, v2);
        float L = (2.0f * L0 + L1) / 3.0f;
        float ratio = height / max(L, 0.0001f);
        // ensure the length of the blade is always height
        v1 = v0 + ratio * (v1_tmp - v0);
        v2 = v1 + ratio * (v2 - v1_tmp);

        Blade updatedBlade = Blade(curBlade.v0, vec4(v1, height), vec4(v2, width), curBlade.up);
        inputBlades.blades[bladeIdx] = updatedBlade;
    #else
        Blade updatedBlade = curBlade;
    #endif

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads
    bool culled = false;
    
    #if USE_CULLING
        #if USE_ORIENTATION_CULLING
            // Orientation Culling 
            vec4 side_vec = vec4(s, 0.0);
            vec3 dir_b = normalize((camera.view * side_vec).xyz);
            vec3 dir_c = normalize((camera.view * vec4(v0, 1.0)).xyz);
            bool is_orientation_culled = abs(dot(dir_b, dir_c)) > 0.9f;
            culled = culled || is_orientation_culled;
        #endif

        #if USE_VIEW_FRUSTUM_CULLING
            // View Frustum Culling
            mat4 viewProj = camera.proj * camera.view;
            vec3 m = 0.25 * v0 + 0.5 * v1 + 0.25 * v2;
            vec4 v0_clip = (viewProj * vec4(v0, 1.0));
            vec4 v2_clip = (viewProj * vec4(v2, 1.0));
            vec4 m_clip = (viewProj * vec4(m, 1.0));
            float t = 0.01; 
            float v0_tolerance = v0_clip.w + t;
            float v2_tolerance = v2_clip.w + t;
            float m_tolerance = m_clip.w + t;
            bool in_frustum = inBounds(v0_clip.x, v0_tolerance) && inBounds(v0_clip.y, v0_tolerance) && inBounds(v0_clip.z, v0_tolerance) ||
                            inBounds(v2_clip.x, v2_tolerance) && inBounds(v2_clip.y, v2_tolerance) && inBounds(v2_clip.z, v2_tolerance) ||
                            inBounds(m_clip.x, m_tolerance) && inBounds(m_clip.y, m_tolerance) && inBounds(m_clip.z, m_tolerance);
            culled = culled || !in_frustum;
        #endif

        #if USE_DISTANCE_CULLING   
            // Distance Culling
            // Extract the rotation part (upper 3x3 matrix)
            mat3 rotationMatrix = mat3(camera.view);
            // Extract the translation part (the last row of the view matrix)
            vec3 cam_translation = vec3(camera.view[3][0], camera.view[3][1], camera.view[3][2]);
            // Calculate the camera position by undoing the rotation and translation
            vec3 c = -transpose(rotationMatrix) * cam_translation;
            vec3 camera_to_blade = v0 - c;
            vec3 projected_up = dot(camera_to_blade, up) * up;
            float d_proj = length(camera_to_blade - projected_up);
            d_proj = clamp(d_proj, 0.0f, CULLING_DISTANCE);
            bool is_too_far = bladeIdx % CULLING_BINS > floor(CULLING_BINS * (1.0f - d_proj / CULLING_DISTANCE));
            culled = culled || is_too_far;
        #endif
        
        // Write to the output buffer
        if (!culled) {
            uint idx = atomicAdd(numBlades.vertexCount, 1);
            outputBlades.blades[idx] = updatedBlade;
        }
    #else
        uint idx = atomicAdd(numBlades.vertexCount, 1);
        outputBlades.blades[idx] = updatedBlade;
    #endif
}   
